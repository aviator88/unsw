Программа реализует автоматизацию действий для проекта L2-сети Unichain. Тестирование сети Unichain было объявлено 10 октября
этого года. В этот же день и началась разработка приложения. К моменту объявления начала работы над финальным проектом уже
была готова альфа-версия. За прошедший месяц альфа была портирована на сервер и допилена. Я не ставил целью написать идеально
работающую программу. Она должна, как минимум не вылетать раз в сутки, а логировать возникающие ошибки и работать дальше.
Поэтому код изобилует костылями и конструкциями try-except.

Особенность программы – работа с профилями браузера хром. В БД каждый аккаунт имеет имя. Это имя используется в формировании пути
до папки профиля хрома. Т. е. для 13 аккаунтов (в моем случае) создано 13 профилей. Такое решение было принято, чтобы обойти
механизмы google и не писать килобайты кода для реализации процедур входа и выхода

Основной цикл программы выполняет 3 задачи:
•	Выбирает аккауны с подошедшим временем для получения тестовый эфир в сети Sepolia с крана Google. При удачном исходе –
записывает новое время = текщее + 24 часа.
•	Выбирает аккаунты с подошедшим временем для активности в сети Unichain. На них:
    o	Перебрасывает часть эфира через мост в сеть Unichain 
    o	Деплоит смарт-контракт в сети Unichain.
В случае удачного исхода - – записывает новое время = текщее + рандомное кол-во (от 1 до 7) суток.

Основа программы – код, заимствованный из курса обучения. Это модули db_api, eth_async и evm_explorer. Они взяты почти без изменений.
На их основе я написал уже свои модули с нужными мне процедурами, это:
1.	db_utils – для работы с БД. В БД одна таблица Wallets, в которой имеются следующие поля:
    o	id, name;
    o	private_key, address;
    o	proxy_pk, proxy_address;
    o	google_acc, google_pass – логин/пароль уч. записи google, после перехода на профили фактически не используется;
    o	next_farming_time - запланированное время для следующего фарма Sepolia ETH (раз в сутки);
    o	next_unichain_time - запланированное время для следующего бриджа м/сетями и деплоя смарт-контракты;
2.	explorer – в этом файле только одна функция, которая возвращает из блокчейна время последней транзакции аккаунта;
3.	google – модуль для работы с Google краном Sepolia. По факту в это модуле используется только 1 функция, которая активирует кран,
    функции входа-выхода утратили свое значение при переходе на работу с профилями;
4.	metamask – здесь собраны функции PW для работы с расширением метамаск;
5.	pw-utils – вспомогательные функции для работы с playwright. Например функци:
    o	get_profile, которая возвращает параметры profile_path (путь к профилю = путь к профилям + имя профиля),
        extetion_version (берет версию расширения из имени папки), extetion_path (собирает конечный путь к расширению);
    o	get_user_agent – в БД должны храниться User_agent для каждого профиля, на случай, если на сайтах отслеживаются
        и сохраняются UA пользователей. Если это поле в БД пустое (после инициализации БД) функция генерирует UA ждет одобрения.
        Одобренный UA записывается в БД и возвращается в основную программу.
6.	sepolia – В этом модуле по задумке должны были быть функции для работы с прокси-кошельками. Чтобы явно не палить, что рабочие
    кошельки связаны между собой, каждый рабочий кошелек д.б. взаимодействовать только со своим прокси-кошельком. А уже через
    прокси-кошелеки шло перераспределение тестовых токенов. (Изначально планировалось доить краны только с 3-4 кошельков,
    а на остальные перекидывать через прокси). Но по факту используется только функция переброски токенов через бридж из
    сети Sepolia в сеть Unichain;
7.	thirdweb – модуль с PW функциями для платформы деплоя смарт-контрактов.
